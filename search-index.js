var N=null,E="",T="t",U="u",searchIndex={};
var R=["sorted","lazysortiterator","sorted_partial_first","lazysortiteratorpartialfirst","sorted_partial_last","lazysortiteratorpartiallast","sorted_by","lazysortiteratorby","result","into_iter","try_from","try_into","borrow_mut","type_id","size_hint","SortedPartial","SortedBy","LazySortIterator","LazySortIteratorPartialFirst","LazySortIteratorPartialLast","LazySortIteratorBy","An insertion-order iterator over a `LinkedHashMap`'s…","Creates an empty linked hash map with the given initial…","option","Returns the value corresponding to the key in the map.","Returns a double-ended iterator visiting all key-value…","Gets a reference to the entry key","borrow","typeid","to_owned","clone_into","next_back","ordering","intoiterator","occupiedentry","LinkedHashMap","OccupiedEntry","VacantEntry","IntoIter","A convenience type that can be used in a constant or static.","AsciiChars","ByteSubstring","Substring","Some optional metadata.","nonzerousize","parseresult","comment","hrxpath","linkedhashmap","hrxerror","to_string","hrx::parse","string","hrxarchive","hrxentry","partial_cmp","hrxentrydata","erroneousbodypath","parseerror","formatter","from_str","HrxArchive","HrxEntry","ErroneousBodyPath","HrxError","HrxEntryData","ParseError","entries"];
searchIndex["hrx"]={"doc":"A Rust implementation of the HRX plain text archive format.","i":[[3,R[61],"hrx","A Human-Readable Archive, consisting of an optional…",N,N],[12,R[46],E,R[43],0,N],[12,R[67],E,"Some optional archive entries with their paths.",0,N],[3,R[62],E,"A single entry in the archive, consisting of an optional…",N,N],[12,R[46],E,R[43],1,N],[12,"data",E,"The specific entry data.",1,N],[3,"HrxPath",E,"Verified-valid path to an entry in the archive.",N,N],[4,R[63],E,"A path to a `body` which contains an invalid sequence",N,N],[13,"RootComment",E,"The root archive comment",2,N],[13,"EntryComment",E,"A comment to the entry with the specified path",2,N],[13,"EntryData",E,"The data of the entry with the specified path",2,N],[4,R[64],E,"Generic error type, encompassing more precise errors.",N,N],[13,"NoBoundary",E,"No valid HRX boundary found",3,N],[13,"Parse",E,"An error occured during parsing",3,N],[13,"BodyContainsBoundary",E,"Some `body`s were made to contain the archive boundary.…",3,N],[13,"DuplicateEntry",E,"Two entries share the same path",3,N],[13,"FileAsDirectory",E,"An entry attempted to use a file as a directory",3,N],[4,R[65],E,"Some variant of an entry's contained data.",N,N],[13,"File",E,"File with some optional contents.",4,N],[12,"body","hrx::HrxEntryData",E,4,N],[13,"Directory","hrx","Bodyless directory.",4,N],[0,"util",E,"Module containing various utility functions.",N,N],[5,"boundary_str","hrx::util","Generate a boundary string of the specified length.",N,[[[R[44]]],[R[52]]]],[0,"parse","hrx","Individual parsing primitives.",N,N],[3,R[66],R[51],"HRX parsing error ",N,N],[12,"line",E,"1-based line # of error ",5,N],[12,"column",E,"1-based column # of error ",5,N],[12,"offset",E,"Byte offset of error ",5,N],[12,"expected",E,"Expected but unmatched rules ",5,N],[5,"directory",E,"`boundary \" \"+ path \"/\" newline+`",N,[[["str"],[R[44]]],[[R[45],[R[47]]],[R[47]]]]],[5,"archive",E,"`entry* comment?`",N,[[["str"],[R[44]]],[R[45]]]],[5,R[46],E,"`boundary newline body`",N,[[["str"],[R[44]]],[["str"],[R[45],["str"]]]]],[5,"entry",E,"`comment? (file | directory)`",N,[[["str"],[R[44]]],[R[45]]]],[5,"body",E,"`contents newline`",N,[[["str"],[R[44]]],[["str"],[R[45],["str"]]]]],[5,"file",E,"`boundary \" \"+ path newline body?`",N,[[["str"],[R[44]]],[R[45]]]],[5,"path",E,"`path-component (\"/\" path-component)*`",N,[[["str"],[R[44]]],[[R[45],[R[47]]],[R[47]]]]],[5,"reduce_raw_entries_and_validate_directory_tree",E,"Convert a collexion of `(path, entry)` pairs into a `path…",N,[[[R[33]]],[[R[8],[R[48],R[49]]],[R[48],[R[47],R[54]]],[R[49]]]]],[5,"discover_first_boundary_length",E,"Search the specified for the length of the first `boundary`.",N,[[["str"],["asref",["str"]]],[[R[44]],[R[23],[R[44]]]]]],[6,"ParseResult",E,"Convenience result type ",N,N],[11,"new","hrx","Create an empty archive with the specified boundary length.",0,[[[R[44]]],[R[53]]]],[11,"boundary_length",E,"Get the current boundary length, i.e. the amount of `=`…",0,[[["self"]],[R[44]]]],[11,"set_boundary_length",E,"Set new boundary length, if valid.",0,[[["self"],[R[44]]],[[R[8],[R[49]]],[R[49]]]]],[11,"validate_content",E,"Validate that no `body`s contain a `boundary` or error out…",0,[[["self"]],[[R[8],[R[49]]],[R[49]]]]],[11,"serialise",E,"Write the archive out to the specified output stream,…",0,[[["self"],["w"]],[[R[8],[R[8]]],[R[8],[R[49],"ioerror"]]]]],[11,"into_inner",E,"Unwraps the contained path.",6,[[],[R[52]]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[10],E,E,0,[[[U]],[R[8]]]],[11,R[11],E,E,0,[[],[R[8]]]],[11,R[27],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[R[28]]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[30],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[10],E,E,1,[[[U]],[R[8]]]],[11,R[11],E,E,1,[[],[R[8]]]],[11,R[27],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[R[28]]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[30],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[50],E,E,6,[[["self"]],[R[52]]]],[11,R[10],E,E,6,[[[U]],[R[8]]]],[11,R[11],E,E,6,[[],[R[8]]]],[11,R[27],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"]],[T]]],[11,R[13],E,E,6,[[["self"]],[R[28]]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[30],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[10],E,E,2,[[[U]],[R[8]]]],[11,R[11],E,E,2,[[],[R[8]]]],[11,R[27],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[28]]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[30],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[50],E,E,3,[[["self"]],[R[52]]]],[11,R[10],E,E,3,[[[U]],[R[8]]]],[11,R[11],E,E,3,[[],[R[8]]]],[11,R[27],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[28]]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[30],E,E,4,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[10],E,E,4,[[[U]],[R[8]]]],[11,R[11],E,E,4,[[],[R[8]]]],[11,R[27],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[28]]]],[11,R[29],R[51],E,5,[[["self"]],[T]]],[11,R[30],E,E,5,[[["self"],[T]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[50],E,E,5,[[["self"]],[R[52]]]],[11,R[10],E,E,5,[[[U]],[R[8]]]],[11,R[11],E,E,5,[[],[R[8]]]],[11,R[27],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"]],[T]]],[11,R[13],E,E,5,[[["self"]],[R[28]]]],[11,"as_ref","hrx",E,6,[[["self"]],["str"]]],[11,"clone",R[51],E,5,[[["self"]],[R[58]]]],[11,"clone","hrx",E,0,[[["self"]],[R[53]]]],[11,"clone",E,E,1,[[["self"]],[R[54]]]],[11,"clone",E,E,4,[[["self"]],[R[56]]]],[11,"clone",E,E,6,[[["self"]],[R[47]]]],[11,"clone",E,E,3,[[["self"]],[R[49]]]],[11,"clone",E,E,2,[[["self"]],[R[57]]]],[11,R[55],E,E,0,[[["self"],[R[53]]],[[R[23],[R[32]]],[R[32]]]]],[11,"lt",E,E,0,[[["self"],[R[53]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[53]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[53]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[53]]],["bool"]]],[11,R[55],E,E,1,[[["self"],[R[54]]],[[R[23],[R[32]]],[R[32]]]]],[11,"lt",E,E,1,[[["self"],[R[54]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[54]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[54]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[54]]],["bool"]]],[11,R[55],E,E,4,[[["self"],[R[56]]],[[R[23],[R[32]]],[R[32]]]]],[11,"lt",E,E,4,[[["self"],[R[56]]],["bool"]]],[11,"le",E,E,4,[[["self"],[R[56]]],["bool"]]],[11,"gt",E,E,4,[[["self"],[R[56]]],["bool"]]],[11,"ge",E,E,4,[[["self"],[R[56]]],["bool"]]],[11,R[55],E,E,6,[[["self"],[R[47]]],[[R[23],[R[32]]],[R[32]]]]],[11,"lt",E,E,6,[[["self"],[R[47]]],["bool"]]],[11,"le",E,E,6,[[["self"],[R[47]]],["bool"]]],[11,"gt",E,E,6,[[["self"],[R[47]]],["bool"]]],[11,"ge",E,E,6,[[["self"],[R[47]]],["bool"]]],[11,R[55],E,E,2,[[["self"],[R[57]]],[[R[23],[R[32]]],[R[32]]]]],[11,"lt",E,E,2,[[["self"],[R[57]]],["bool"]]],[11,"le",E,E,2,[[["self"],[R[57]]],["bool"]]],[11,"gt",E,E,2,[[["self"],[R[57]]],["bool"]]],[11,"ge",E,E,2,[[["self"],[R[57]]],["bool"]]],[11,"eq",R[51],E,5,[[["self"],[R[58]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[58]]],["bool"]]],[11,"eq","hrx",E,0,[[["self"],[R[53]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[53]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[54]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[54]]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[56]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[56]]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[47]]],["bool"]]],[11,"ne",E,E,6,[[["self"],[R[47]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[49]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[49]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[57]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[57]]],["bool"]]],[11,"from",E,E,3,[[[R[58]]],[R[49]]]],[11,"from",E,E,3,[[[R[57]]],[R[49]]]],[11,"from",E,E,3,[[["v"]],[R[49]]]],[11,"cmp",E,E,0,[[["self"],[R[53]]],[R[32]]]],[11,"cmp",E,E,1,[[["self"],[R[54]]],[R[32]]]],[11,"cmp",E,E,4,[[["self"],[R[56]]],[R[32]]]],[11,"cmp",E,E,6,[[["self"],[R[47]]],[R[32]]]],[11,"cmp",E,E,2,[[["self"],[R[57]]],[R[32]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,1,[[["self"],["__h"]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"hash",E,E,6,[[["self"],["__h"]]]],[11,"hash",E,E,2,[[["self"],["__h"]]]],[11,"fmt",R[51],E,5,[[["self"],[R[59]]],[["error"],[R[8],["error"]]]]],[11,"fmt","hrx",E,6,[[["self"],[R[59]]],[R[8]]]],[11,"fmt",E,E,3,[[["self"],[R[59]]],[R[8]]]],[11,"fmt",R[51],E,5,[[["self"],[R[59]]],[R[8]]]],[11,"fmt","hrx",E,0,[[["self"],[R[59]]],[R[8]]]],[11,"fmt",E,E,1,[[["self"],[R[59]]],[R[8]]]],[11,"fmt",E,E,4,[[["self"],[R[59]]],[R[8]]]],[11,"fmt",E,E,6,[[["self"],[R[59]]],[R[8]]]],[11,"fmt",E,E,3,[[["self"],[R[59]]],[R[8]]]],[11,"fmt",E,E,2,[[["self"],[R[59]]],[R[8]]]],[11,R[60],E,E,0,[[["str"]],[R[8]]]],[11,R[60],E,E,6,[[["str"]],[R[8]]]],[11,R[27],E,E,6,[[["self"]],["str"]]],[11,"description",R[51],E,5,[[["self"]],["str"]]],[11,"source","hrx",E,3,[[["self"]],[[R[23],["error"]],["error"]]]]],"p":[[3,R[61]],[3,R[62]],[4,R[63]],[4,R[64]],[4,R[65]],[3,R[66]],[3,"HrxPath"]]};
searchIndex["jetscii"]={"doc":"A tiny library to efficiently search strings for sets of…","i":[[3,"Bytes","jetscii","Searches a slice for a set of bytes. Up to 16 bytes may be…",N,N],[3,R[40],E,"Searches a string for a set of ASCII characters. Up to 16…",N,N],[3,R[41],E,"Searches a slice for the first occurence of the subslice.",N,N],[3,R[42],E,"Searches a string for the first occurence of the substring.",N,N],[6,"BytesConst",E,R[39],N,N],[6,"AsciiCharsConst",E,R[39],N,N],[6,"ByteSubstringConst",E,R[39],N,N],[6,"SubstringConst",E,R[39],N,N],[11,"new",E,"Manual constructor; prefer using [`bytes!`] instead.",0,[[["f"],["i32"]],["self"]]],[11,"find",E,"Searches the slice for the first matching byte in the set.",0,[[["self"]],[[R[23],["usize"]],["usize"]]]],[11,"new",E,"Manual constructor; prefer using [`ascii_chars!`] instead.",1,[[["f"],["i32"]],["self"]]],[11,"find",E,"Searches the string for the first matching ASCII byte in…",1,[[["self"],["str"]],[[R[23],["usize"]],["usize"]]]],[11,"new",E,E,2,[[],["self"]]],[11,"find",E,"Searches the slice for the first occurence of the subslice.",2,[[["self"]],[[R[23],["usize"]],["usize"]]]],[11,"new",E,E,3,[[["str"]],["self"]]],[11,"find",E,"Searches the string for the first occurence of the…",3,[[["self"],["str"]],[[R[23],["usize"]],["usize"]]]],[14,"bytes",E,"A convenience constructor for a [`Bytes`] that…",N,N],[14,"ascii_chars",E,"A convenience constructor for an [`AsciiChars`] that…",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[10],E,E,0,[[[U]],[R[8]]]],[11,R[11],E,E,0,[[],[R[8]]]],[11,R[27],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[R[28]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[10],E,E,1,[[[U]],[R[8]]]],[11,R[11],E,E,1,[[],[R[8]]]],[11,R[27],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[R[28]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[10],E,E,2,[[[U]],[R[8]]]],[11,R[11],E,E,2,[[],[R[8]]]],[11,R[27],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[28]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[10],E,E,3,[[[U]],[R[8]]]],[11,R[11],E,E,3,[[],[R[8]]]],[11,R[27],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[28]]]]],"p":[[3,"Bytes"],[3,R[40]],[3,R[41]],[3,R[42]]]};
searchIndex["lazysort"]={"doc":E,"i":[[3,R[17],"lazysort",E,N,N],[3,R[18],E,E,N,N],[3,R[19],E,E,N,N],[3,R[20],E,E,N,N],[8,"Sorted",E,E,N,N],[16,"Item",E,E,0,N],[10,R[0],E,E,0,[[],[R[1]]]],[8,R[15],E,E,N,N],[16,"Item",E,E,1,N],[10,R[2],E,E,1,[[],[R[3]]]],[10,R[4],E,E,1,[[],[R[5]]]],[8,R[16],E,E,N,N],[16,"Item",E,E,2,N],[10,R[6],E,E,2,[[["f"]],[R[7]]]],[11,R[0],E,E,3,[[],[R[1]]]],[11,R[2],E,E,3,[[],[R[3]]]],[11,R[4],E,E,3,[[],[R[5]]]],[11,R[6],E,E,3,[[["f"]],[R[7]]]],[11,R[9],E,E,3,[[],["i"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[10],E,E,3,[[[U]],[R[8]]]],[11,R[11],E,E,3,[[],[R[8]]]],[11,R[27],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[28]]]],[11,R[0],E,E,4,[[],[R[1]]]],[11,R[2],E,E,4,[[],[R[3]]]],[11,R[4],E,E,4,[[],[R[5]]]],[11,R[6],E,E,4,[[["f"]],[R[7]]]],[11,R[9],E,E,4,[[],["i"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[10],E,E,4,[[[U]],[R[8]]]],[11,R[11],E,E,4,[[],[R[8]]]],[11,R[27],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[28]]]],[11,R[0],E,E,5,[[],[R[1]]]],[11,R[2],E,E,5,[[],[R[3]]]],[11,R[4],E,E,5,[[],[R[5]]]],[11,R[6],E,E,5,[[["f"]],[R[7]]]],[11,R[9],E,E,5,[[],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[10],E,E,5,[[[U]],[R[8]]]],[11,R[11],E,E,5,[[],[R[8]]]],[11,R[27],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"]],[T]]],[11,R[13],E,E,5,[[["self"]],[R[28]]]],[11,R[0],E,E,6,[[],[R[1]]]],[11,R[2],E,E,6,[[],[R[3]]]],[11,R[4],E,E,6,[[],[R[5]]]],[11,R[6],E,E,6,[[["f"]],[R[7]]]],[11,R[9],E,E,6,[[],["i"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[10],E,E,6,[[[U]],[R[8]]]],[11,R[11],E,E,6,[[],[R[8]]]],[11,R[27],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"]],[T]]],[11,R[13],E,E,6,[[["self"]],[R[28]]]],[11,"next",E,E,3,[[["self"]],[R[23]]]],[11,R[14],E,E,3,[[["self"]]]],[11,"next",E,E,4,[[["self"]],[R[23]]]],[11,R[14],E,E,4,[[["self"]]]],[11,"next",E,E,5,[[["self"]],[R[23]]]],[11,R[14],E,E,5,[[["self"]]]],[11,"next",E,E,6,[[["self"]],[R[23]]]],[11,R[14],E,E,6,[[["self"]]]]],"p":[[8,"Sorted"],[8,R[15]],[8,R[16]],[3,R[17]],[3,R[18]],[3,R[19]],[3,R[20]]]};
searchIndex["linked_hash_map"]={"doc":"A `HashMap` wrapper that holds key-value pairs in…","i":[[3,R[35],"linked_hash_map","A linked hash map.",N,N],[3,"Iter",E,R[21],N,N],[3,"IterMut",E,R[21],N,N],[3,R[38],E,"A consuming insertion-order iterator over a…",N,N],[3,"Entries",E,R[21],N,N],[3,"Keys",E,"An insertion-order iterator over a `LinkedHashMap`'s keys.",N,N],[3,"Values",E,"An insertion-order iterator over a `LinkedHashMap`'s values.",N,N],[3,R[36],E,"A view into a single occupied location in a `LinkedHashMap`.",N,N],[3,R[37],E,"A view into a single empty location in a `LinkedHashMap`.",N,N],[4,"Entry",E,"A view into a single location in a map, which may be…",N,N],[13,"Occupied",E,"An occupied Entry.",0,N],[13,"Vacant",E,"A vacant Entry.",0,N],[11,"new",E,"Creates a linked hash map.",1,[[],["self"]]],[11,"with_capacity",E,R[22],1,[[["usize"]],["self"]]],[11,"with_hasher",E,R[22],1,[[["s"]],["self"]]],[11,"with_capacity_and_hasher",E,R[22],1,[[["s"],["usize"]],["self"]]],[11,"reserve",E,"Reserves capacity for at least `additional` more elements…",1,[[["self"],["usize"]]]],[11,"shrink_to_fit",E,"Shrinks the capacity of the map as much as possible. It…",1,[[["self"]]]],[11,"entry",E,"Gets the given key's corresponding entry in the map for…",1,[[["self"],["k"]],["entry"]]],[11,R[67],E,"Returns an iterator visiting all entries in insertion…",1,[[["self"]],[R[67]]]],[11,"insert",E,"Inserts a key-value pair into the map. If the key already…",1,[[["self"],["k"],["v"]],[R[23]]]],[11,"contains_key",E,"Checks if the map contains the given key.",1,[[["self"],["q"]],["bool"]]],[11,"get",E,R[24],1,[[["self"],["q"]],[[R[23]],["v"]]]],[11,"get_mut",E,"Returns the mutable reference corresponding to the key in…",1,[[["self"],["q"]],[[R[23]],["v"]]]],[11,"get_refresh",E,R[24],1,[[["self"],["q"]],[[R[23]],["v"]]]],[11,"remove",E,"Removes and returns the value corresponding to the key…",1,[[["self"],["q"]],[R[23]]]],[11,"capacity",E,"Returns the maximum number of key-value pairs the map can…",1,[[["self"]],["usize"]]],[11,"pop_front",E,"Removes the first entry.",1,[[["self"]],[R[23]]]],[11,"front",E,"Gets the first entry.",1,[[["self"]],[R[23]]]],[11,"pop_back",E,"Removes the last entry.",1,[[["self"]],[R[23]]]],[11,"back",E,"Gets the last entry.",1,[[["self"]],[R[23]]]],[11,"len",E,"Returns the number of key-value pairs in the map.",1,[[["self"]],["usize"]]],[11,"is_empty",E,"Returns whether the map is currently empty.",1,[[["self"]],["bool"]]],[11,"hasher",E,"Returns a reference to the map's hasher.",1,[[["self"]],["s"]]],[11,"clear",E,"Clears the map of all key-value pairs.",1,[[["self"]]]],[11,"iter",E,R[25],1,[[["self"]],["iter"]]],[11,"iter_mut",E,R[25],1,[[["self"]],["itermut"]]],[11,"keys",E,"Returns a double-ended iterator visiting all key in order…",1,[[["self"]],["keys"]]],[11,"values",E,"Returns a double-ended iterator visiting all values in…",1,[[["self"]],["values"]]],[11,"key",E,"Returns the entry key",0,[[["self"]],["k"]]],[11,"or_insert",E,"Ensures a value is in the entry by inserting the default…",0,[[["v"]],["v"]]],[11,"or_insert_with",E,"Ensures a value is in the entry by inserting the result of…",0,[[["fnonce"]],["v"]]],[11,"key",E,R[26],2,[[["self"]],["k"]]],[11,"get",E,"Gets a reference to the value in the entry.",2,[[["self"]],["v"]]],[11,"get_mut",E,"Gets a mutable reference to the value in the entry.",2,[[["self"]],["v"]]],[11,"into_mut",E,"Converts the OccupiedEntry into a mutable reference to the…",2,[[],["v"]]],[11,"insert",E,"Sets the value of the entry, and returns the entry's old…",2,[[["self"],["v"]],["v"]]],[11,"remove",E,"Takes the value out of the entry, and returns it",2,[[],["v"]]],[11,"key",E,R[26],3,[[["self"]],["k"]]],[11,"insert",E,"Sets the value of the entry with the VacantEntry's key,…",3,[[["v"]],["v"]]],[11,R[9],E,E,1,[[],["i"]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[30],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[10],E,E,1,[[[U]],[R[8]]]],[11,R[11],E,E,1,[[],[R[8]]]],[11,R[27],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[R[28]]]],[11,R[9],E,E,4,[[],["i"]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[30],E,E,4,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[10],E,E,4,[[[U]],[R[8]]]],[11,R[11],E,E,4,[[],[R[8]]]],[11,R[27],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[28]]]],[11,R[9],E,E,5,[[],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[10],E,E,5,[[[U]],[R[8]]]],[11,R[11],E,E,5,[[],[R[8]]]],[11,R[27],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"]],[T]]],[11,R[13],E,E,5,[[["self"]],[R[28]]]],[11,R[9],E,E,6,[[],["i"]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[30],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[10],E,E,6,[[[U]],[R[8]]]],[11,R[11],E,E,6,[[],[R[8]]]],[11,R[27],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"]],[T]]],[11,R[13],E,E,6,[[["self"]],[R[28]]]],[11,R[9],E,E,7,[[],["i"]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[10],E,E,7,[[[U]],[R[8]]]],[11,R[11],E,E,7,[[],[R[8]]]],[11,R[27],E,E,7,[[["self"]],[T]]],[11,R[12],E,E,7,[[["self"]],[T]]],[11,R[13],E,E,7,[[["self"]],[R[28]]]],[11,R[9],E,E,8,[[],["i"]]],[11,R[29],E,E,8,[[["self"]],[T]]],[11,R[30],E,E,8,[[["self"],[T]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[10],E,E,8,[[[U]],[R[8]]]],[11,R[11],E,E,8,[[],[R[8]]]],[11,R[27],E,E,8,[[["self"]],[T]]],[11,R[12],E,E,8,[[["self"]],[T]]],[11,R[13],E,E,8,[[["self"]],[R[28]]]],[11,R[9],E,E,9,[[],["i"]]],[11,R[29],E,E,9,[[["self"]],[T]]],[11,R[30],E,E,9,[[["self"],[T]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[10],E,E,9,[[[U]],[R[8]]]],[11,R[11],E,E,9,[[],[R[8]]]],[11,R[27],E,E,9,[[["self"]],[T]]],[11,R[12],E,E,9,[[["self"]],[T]]],[11,R[13],E,E,9,[[["self"]],[R[28]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[10],E,E,2,[[[U]],[R[8]]]],[11,R[11],E,E,2,[[],[R[8]]]],[11,R[27],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[28]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[10],E,E,3,[[[U]],[R[8]]]],[11,R[11],E,E,3,[[],[R[8]]]],[11,R[27],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[28]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[10],E,E,0,[[[U]],[R[8]]]],[11,R[11],E,E,0,[[],[R[8]]]],[11,R[27],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[R[28]]]],[11,"len",E,E,4,[[["self"]],["usize"]]],[11,"len",E,E,5,[[["self"]],["usize"]]],[11,"len",E,E,6,[[["self"]],["usize"]]],[11,"len",E,E,8,[[["self"]],["usize"]]],[11,"len",E,E,9,[[["self"]],["usize"]]],[11,"drop",E,E,1,[[["self"]]]],[11,"drop",E,E,6,[[["self"]]]],[11,R[9],E,E,1,[[],["intoiter"]]],[11,R[31],E,E,4,[[["self"]],[R[23]]]],[11,R[31],E,E,5,[[["self"]],[R[23]]]],[11,R[31],E,E,6,[[["self"]],[R[23]]]],[11,R[31],E,E,8,[[["self"]],[["k"],[R[23]]]]],[11,R[31],E,E,9,[[["self"]],[["v"],[R[23]]]]],[11,"default",E,E,1,[[],["self"]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"clone",E,E,4,[[["self"]],["self"]]],[11,"clone",E,E,6,[[["self"]],["self"]]],[11,"clone",E,E,8,[[["self"]],["self"]]],[11,"clone",E,E,9,[[["self"]],["self"]]],[11,R[55],E,E,1,[[["self"]],[[R[32]],[R[23],[R[32]]]]]],[11,"lt",E,E,1,[[["self"]],["bool"]]],[11,"le",E,E,1,[[["self"]],["bool"]]],[11,"ge",E,E,1,[[["self"]],["bool"]]],[11,"gt",E,E,1,[[["self"]],["bool"]]],[11,"extend",E,E,1,[[["self"],[R[33]]]]],[11,"extend",E,E,1,[[["self"],[R[33]]]]],[11,"eq",E,E,1,[[["self"]],["bool"]]],[11,"next",E,E,4,[[["self"]],[R[23]]]],[11,R[14],E,E,4,[[["self"]]]],[11,"next",E,E,5,[[["self"]],[R[23]]]],[11,R[14],E,E,5,[[["self"]]]],[11,"next",E,E,6,[[["self"]],[R[23]]]],[11,R[14],E,E,6,[[["self"]]]],[11,"next",E,E,7,[[["self"]],[[R[23],[R[34]]],[R[34]]]]],[11,R[14],E,E,7,[[["self"]]]],[11,"next",E,E,8,[[["self"]],[["k"],[R[23]]]]],[11,R[14],E,E,8,[[["self"]]]],[11,"next",E,E,9,[[["self"]],[["v"],[R[23]]]]],[11,R[14],E,E,9,[[["self"]]]],[11,"cmp",E,E,1,[[["self"]],[R[32]]]],[11,"hash",E,E,1,[[["self"],["h"]]]],[11,"fmt",E,"Returns a string that lists the key-value pairs in…",1,[[["self"],[R[59]]],[R[8]]]],[11,"index",E,E,1,[[["self"],["q"]],["v"]]],[11,"index_mut",E,E,1,[[["self"],["q"]],["v"]]],[11,"from_iter",E,E,1,[[[R[33]]],["self"]]]],"p":[[4,"Entry"],[3,R[35]],[3,R[36]],[3,R[37]],[3,"Iter"],[3,"IterMut"],[3,R[38]],[3,"Entries"],[3,"Keys"],[3,"Values"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);